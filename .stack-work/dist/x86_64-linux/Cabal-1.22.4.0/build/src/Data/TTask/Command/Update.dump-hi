
==================== FINAL INTERFACE ====================
2016-05-03 07:07:40.518838 UTC

interface ttask_72zq9oHyfMzKhn7BjotlNr:Data.TTask.Command.Update 7102
  interface hash: 40975f2c7c1d333bce88c8a92a5ffd96
  ABI hash: a183d18f0c6fc51cad079d2d7207f7cc
  export-list hash: 47766b637611cf404bb50d31aec69b00
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ffa1665cb7e7b1b19a01b9358f36d6f0
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.TTask.Command.Update.updateSprint
  Data.TTask.Command.Update.updateSprintStatus
  Data.TTask.Command.Update.updateSprintsSprint
  Data.TTask.Command.Update.updateSprintsStory
  Data.TTask.Command.Update.updateSprintsTask
  Data.TTask.Command.Update.updateStory
  Data.TTask.Command.Update.updateStoryStatus
  Data.TTask.Command.Update.updateStorysStory
  Data.TTask.Command.Update.updateStorysTask
  Data.TTask.Command.Update.updateTask
  Data.TTask.Command.Update.updateTaskStatus
  Data.TTask.Command.Update.updateTasksTask
module dependencies: Data.TTask.Types
package dependencies: array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ
                      base-4.8.1.0* deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o
                      ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      safe-0.3.9@safe_BXSoeRP9IFG6t9s3abNgVi
                      time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.Format.Parse
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.LocalTime.LocalTime
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Generics
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  Data.TTask.Types 53600b9547fce3e645332f8159673fe4
  exports: be18ddcf96231cbf82b74266a19fefcc
  Id 89e52418972f0d5f81e790e20b930373
  Project 8e3e83a4be85f8c7d6dcea853bd9dbcb
  Sprint c3034c815bf33d3a16be1a6dc834186c
  TStatusCons e763af7b13bf1e78419d95fdb45f1e89
  TStatusRecord 86bd241592c4e05830e227b89c779134
  Task 30af9f1a75d18f3b5ff07253deccac43
  UserStory edae4947a6c7bbdf6144725474863e99
  projectBacklog e995ffa6d66c36f13f0f41a72180b374
  projectSprints 5af965e26643b99f22685b2e9bfcec1e
  sprintId bacdc9239d66a6e0d5122ab793be49d2
  sprintStatus ca89dbff1536ca53062a2d825e5b918b
  sprintStorys 3278e9d1b6d5f296df0fb53f0fd61b18
  storyId 9363c6272f78959f6e2b03f2baa11912
  storyStatus 9762304227c7e88c5e9dd8cb17058b7c
  storyTasks 3300a99ccbe6da0606cfe15ec51eedf6
  taskId 1c52271f38b72728b99a70fde674f96d
  taskStatus 82017d4268f256bd3b5d49058b2036e6
ad8cee24bd0fa8a59d699f22e2515e56
  updateSprint ::
    Data.TTask.Types.Id
    -> (Data.TTask.Types.Sprint -> Data.TTask.Types.Sprint)
    -> Data.TTask.Types.Project
    -> Data.TTask.Types.Project
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U)><L,C(U(U,U,U,U))><S,1*U(U,U,1*U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ i :: Data.TTask.Types.Id
                   f :: Data.TTask.Types.Sprint -> Data.TTask.Types.Sprint
                   pj :: Data.TTask.Types.Project ->
                 case pj of wild { Data.TTask.Types.Project ds ds1 ds2 ds3 ->
                 Data.TTask.Types.Project
                   ds
                   ds1
                   (GHC.Base.build
                      @ Data.TTask.Types.Sprint
                      (\ @ b1
                         c :: Data.TTask.Types.Sprint -> b1 -> b1[OneShot]
                         n :: b1[OneShot] ->
                       GHC.Base.foldr
                         @ Data.TTask.Types.Sprint
                         @ b1
                         (GHC.Base.mapFB
                            @ Data.TTask.Types.Sprint
                            @ b1
                            @ Data.TTask.Types.Sprint
                            c
                            (Data.TTask.Command.Update.updateSprintsSprint i f))
                         n
                         ds2))
                   ds3 }) -}
5712aca50715b4e31948468746bf40f6
  updateSprintStatus ::
    Data.TTask.Types.Id
    -> Data.TTask.Types.TStatusRecord
    -> Data.TTask.Types.Project
    -> Data.TTask.Types.Project
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U)><L,U><S,1*U(U,U,1*U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Data.TTask.Types.Id
                   w1 :: Data.TTask.Types.TStatusRecord
                   w2 :: Data.TTask.Types.Project ->
                 case w2 of ww { Data.TTask.Types.Project ww1 ww2 ww3 ww4 ->
                 Data.TTask.Types.Project
                   ww1
                   ww2
                   (GHC.Base.map
                      @ Data.TTask.Types.Sprint
                      @ Data.TTask.Types.Sprint
                      (\ sp :: Data.TTask.Types.Sprint ->
                       case w of wild { GHC.Types.I# x ->
                       case sp of wild1 { Data.TTask.Types.Sprint ds1 ds2 ds3 ds4 ->
                       case ds1 of wild2 { GHC.Types.I# y ->
                       case GHC.Prim.tagToEnum#
                              @ GHC.Types.Bool
                              (GHC.Prim.==# x y) of wild3 {
                         GHC.Types.False -> wild1
                         GHC.Types.True
                         -> Data.TTask.Types.Sprint
                              wild2
                              ds2
                              ds3
                              (Data.TTask.Types.TStatusCons w1 ds4) } } } })
                      ww3)
                   ww4 }) -}
20fece0c7dc63b0acb30266aaa171e43
  updateSprintsSprint ::
    Data.TTask.Types.Id
    -> (Data.TTask.Types.Sprint -> Data.TTask.Types.Sprint)
    -> Data.TTask.Types.Sprint
    -> Data.TTask.Types.Sprint
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(U)><L,1*C1(U(U,U,U,U))><S(SLLL),1*U(U(U),U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ i :: Data.TTask.Types.Id
                   f :: Data.TTask.Types.Sprint -> Data.TTask.Types.Sprint
                   sp :: Data.TTask.Types.Sprint ->
                 case i of wild { GHC.Types.I# x ->
                 case sp of wild1 { Data.TTask.Types.Sprint ds1 ds2 ds3 ds4 ->
                 case ds1 of wild2 { GHC.Types.I# y ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# x y) of wild3 {
                   GHC.Types.False -> wild1 GHC.Types.True -> f wild1 } } } }) -}
1967454eefeee3e0eb37b1434888a233
  updateSprintsStory ::
    Data.TTask.Types.Id
    -> (Data.TTask.Types.UserStory -> Data.TTask.Types.UserStory)
    -> Data.TTask.Types.Sprint
    -> Data.TTask.Types.Sprint
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U)><L,C(U(U,U,U,U))><S,1*U(U,U,1*U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ i :: Data.TTask.Types.Id
                   f :: Data.TTask.Types.UserStory -> Data.TTask.Types.UserStory
                   sp :: Data.TTask.Types.Sprint ->
                 case sp of wild { Data.TTask.Types.Sprint ds ds1 ds2 ds3 ->
                 Data.TTask.Types.Sprint
                   ds
                   ds1
                   (GHC.Base.build
                      @ Data.TTask.Types.UserStory
                      (\ @ b1
                         c :: Data.TTask.Types.UserStory -> b1 -> b1[OneShot]
                         n :: b1[OneShot] ->
                       GHC.Base.foldr
                         @ Data.TTask.Types.UserStory
                         @ b1
                         (GHC.Base.mapFB
                            @ Data.TTask.Types.UserStory
                            @ b1
                            @ Data.TTask.Types.UserStory
                            c
                            (Data.TTask.Command.Update.updateStorysStory i f))
                         n
                         ds2))
                   ds3 }) -}
23fcf770a8d22deabd791dec7a6daf43
  updateSprintsTask ::
    Data.TTask.Types.Id
    -> (Data.TTask.Types.Task -> Data.TTask.Types.Task)
    -> Data.TTask.Types.Sprint
    -> Data.TTask.Types.Sprint
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U)><L,C(U(U,U,U,U,U))><S,1*U(U,U,1*U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ i :: Data.TTask.Types.Id
                   f :: Data.TTask.Types.Task -> Data.TTask.Types.Task
                   sp :: Data.TTask.Types.Sprint ->
                 case sp of wild { Data.TTask.Types.Sprint ds ds1 ds2 ds3 ->
                 Data.TTask.Types.Sprint
                   ds
                   ds1
                   (GHC.Base.build
                      @ Data.TTask.Types.UserStory
                      (\ @ b1
                         c :: Data.TTask.Types.UserStory -> b1 -> b1[OneShot]
                         n :: b1[OneShot] ->
                       GHC.Base.foldr
                         @ Data.TTask.Types.UserStory
                         @ b1
                         (GHC.Base.mapFB
                            @ Data.TTask.Types.UserStory
                            @ b1
                            @ Data.TTask.Types.UserStory
                            c
                            (Data.TTask.Command.Update.updateStorysTask i f))
                         n
                         ds2))
                   ds3 }) -}
c9f08051eb91a52971f5d47854d53090
  updateStory ::
    Data.TTask.Types.Id
    -> (Data.TTask.Types.UserStory -> Data.TTask.Types.UserStory)
    -> Data.TTask.Types.Project
    -> Data.TTask.Types.Project
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U)><L,C(U(U,U,U,U))><S,1*U(U,1*U,1*U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Data.TTask.Types.Id
                   w1 :: Data.TTask.Types.UserStory -> Data.TTask.Types.UserStory
                   w2 :: Data.TTask.Types.Project ->
                 case w2 of ww { Data.TTask.Types.Project ww1 ww2 ww3 ww4 ->
                 Data.TTask.Types.Project
                   ww1
                   (GHC.Base.map
                      @ Data.TTask.Types.UserStory
                      @ Data.TTask.Types.UserStory
                      (Data.TTask.Command.Update.updateStorysStory w w1)
                      ww2)
                   (GHC.Base.map
                      @ Data.TTask.Types.Sprint
                      @ Data.TTask.Types.Sprint
                      (Data.TTask.Command.Update.updateSprintsStory w w1)
                      ww3)
                   ww4 }) -}
186385102796347e48e955c9f792ff7d
  updateStoryStatus ::
    Data.TTask.Types.Id
    -> Data.TTask.Types.TStatusRecord
    -> Data.TTask.Types.Project
    -> Data.TTask.Types.Project
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U)><L,U><S,1*U(U,1*U,1*U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ i :: Data.TTask.Types.Id
                   r :: Data.TTask.Types.TStatusRecord
                   pj :: Data.TTask.Types.Project ->
                 Data.TTask.Command.Update.updateStory
                   i
                   (\ s :: Data.TTask.Types.UserStory ->
                    case s of wild { Data.TTask.Types.UserStory ds ds1 ds2 ds3 ->
                    Data.TTask.Types.UserStory
                      ds
                      ds1
                      ds2
                      (Data.TTask.Types.TStatusCons r ds3) })
                   pj) -}
1b2bffa3d355c0290869f89968de4c5a
  updateStorysStory ::
    Data.TTask.Types.Id
    -> (Data.TTask.Types.UserStory -> Data.TTask.Types.UserStory)
    -> Data.TTask.Types.UserStory
    -> Data.TTask.Types.UserStory
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(U)><L,1*C1(U(U,U,U,U))><S(SLLL),1*U(U(U),U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ i :: Data.TTask.Types.Id
                   f :: Data.TTask.Types.UserStory -> Data.TTask.Types.UserStory
                   story :: Data.TTask.Types.UserStory ->
                 case i of wild { GHC.Types.I# x ->
                 case story of wild1 { Data.TTask.Types.UserStory ds1 ds2 ds3 ds4 ->
                 case ds1 of wild2 { GHC.Types.I# y ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# x y) of wild3 {
                   GHC.Types.False -> wild1 GHC.Types.True -> f wild1 } } } }) -}
857d69d020a4ba7a2e9db95f0320e96c
  updateStorysTask ::
    Data.TTask.Types.Id
    -> (Data.TTask.Types.Task -> Data.TTask.Types.Task)
    -> Data.TTask.Types.UserStory
    -> Data.TTask.Types.UserStory
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U)><L,C(U(U,U,U,U,U))><S,1*U(U,U,1*U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ i :: Data.TTask.Types.Id
                   f :: Data.TTask.Types.Task -> Data.TTask.Types.Task
                   story :: Data.TTask.Types.UserStory ->
                 case story of wild { Data.TTask.Types.UserStory ds ds1 ds2 ds3 ->
                 Data.TTask.Types.UserStory
                   ds
                   ds1
                   (GHC.Base.build
                      @ Data.TTask.Types.Task
                      (\ @ b1
                         c :: Data.TTask.Types.Task -> b1 -> b1[OneShot]
                         n :: b1[OneShot] ->
                       GHC.Base.foldr
                         @ Data.TTask.Types.Task
                         @ b1
                         (GHC.Base.mapFB
                            @ Data.TTask.Types.Task
                            @ b1
                            @ Data.TTask.Types.Task
                            c
                            (Data.TTask.Command.Update.updateTasksTask i f))
                         n
                         ds2))
                   ds3 }) -}
26501c77d48a582918d3210fad126e4b
  updateTask ::
    Data.TTask.Types.Id
    -> (Data.TTask.Types.Task -> Data.TTask.Types.Task)
    -> Data.TTask.Types.Project
    -> Data.TTask.Types.Project
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U)><L,C(U(U,U,U,U,U))><S,1*U(U,1*U,1*U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Data.TTask.Types.Id
                   w1 :: Data.TTask.Types.Task -> Data.TTask.Types.Task
                   w2 :: Data.TTask.Types.Project ->
                 case w2 of ww { Data.TTask.Types.Project ww1 ww2 ww3 ww4 ->
                 Data.TTask.Types.Project
                   ww1
                   (GHC.Base.map
                      @ Data.TTask.Types.UserStory
                      @ Data.TTask.Types.UserStory
                      (Data.TTask.Command.Update.updateStorysTask w w1)
                      ww2)
                   (GHC.Base.map
                      @ Data.TTask.Types.Sprint
                      @ Data.TTask.Types.Sprint
                      (Data.TTask.Command.Update.updateSprintsTask w w1)
                      ww3)
                   ww4 }) -}
514e9e287b39c7d4a287c02c295b13b9
  updateTaskStatus ::
    Data.TTask.Types.Id
    -> Data.TTask.Types.TStatusRecord
    -> Data.TTask.Types.Project
    -> Data.TTask.Types.Project
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U)><L,U><S,1*U(U,1*U,1*U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ i :: Data.TTask.Types.Id
                   r :: Data.TTask.Types.TStatusRecord
                   pj :: Data.TTask.Types.Project ->
                 Data.TTask.Command.Update.updateTask
                   i
                   (\ t :: Data.TTask.Types.Task ->
                    case t of wild { Data.TTask.Types.Task ds ds1 ds2 ds3 ds4 ->
                    Data.TTask.Types.Task
                      ds
                      ds1
                      ds2
                      (Data.TTask.Types.TStatusCons r ds3)
                      ds4 })
                   pj) -}
d74dcac35aefb8cc850a0a2f39d649d6
  updateTasksTask ::
    Data.TTask.Types.Id
    -> (Data.TTask.Types.Task -> Data.TTask.Types.Task)
    -> Data.TTask.Types.Task
    -> Data.TTask.Types.Task
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(U)><L,1*C1(U(U,U,U,U,U))><S(SLLLL),1*U(U(U),U,U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ i :: Data.TTask.Types.Id
                   f :: Data.TTask.Types.Task -> Data.TTask.Types.Task
                   task :: Data.TTask.Types.Task ->
                 case i of wild { GHC.Types.I# x ->
                 case task of wild1 { Data.TTask.Types.Task ds1 ds2 ds3 ds4 ds5 ->
                 case ds1 of wild2 { GHC.Types.I# y ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# x y) of wild3 {
                   GHC.Types.False -> wild1 GHC.Types.True -> f wild1 } } } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

