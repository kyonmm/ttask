
==================== FINAL INTERFACE ====================
2016-05-03 07:07:41.432337 UTC

interface ttask_72zq9oHyfMzKhn7BjotlNr:Data.TTask.File 7102
  interface hash: 85988ab88092671d242af114bd80b948
  ABI hash: b8c93530de9eb6a16e42c01ab6a000dd
  export-list hash: 701faf540114311adab3d438371a37e4
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b26dd936ccefa5ad3cd3de66a901780e
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.TTask.File.activeMemoryFile
  Data.TTask.File.activeProjectName
  Data.TTask.File.findProjects
  Data.TTask.File.getDirectoryContentsMay
  Data.TTask.File.initDirectory
  Data.TTask.File.initProjectFile
  Data.TTask.File.projectsDirectory
  Data.TTask.File.readActiveProject
  Data.TTask.File.readProject
  Data.TTask.File.setActiveProject
  Data.TTask.File.workDirectory
  Data.TTask.File.writeActiveProject
  Data.TTask.File.writeProject
  Data.TTask.File.Success{Data.TTask.File.Failure Data.TTask.File.Success}
module dependencies: Data.TTask.Command Data.TTask.Command.Add
                     Data.TTask.Command.Delete Data.TTask.Command.Move
                     Data.TTask.Command.Update Data.TTask.Types
package dependencies: array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ
                      base-4.8.1.0* deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o
                      directory-1.2.2.0@direc_KowvXytSqazBcvN7MGpFtg*
                      extra-1.4.2@extra_5OxQCVeoy8KDx9eBZEd38j
                      filepath-1.4.0.0@filep_KsGE6pHE5eZHSN90ZVax6A ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 safe-0.3.9@safe_BXSoeRP9IFG6t9s3abNgVi
                      time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH
                      unix-2.7.1.0@unix_A3WgcI5QiHK4PDo4jSYdwQ
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.Format.Parse
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.LocalTime.LocalTime
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Generics
import  -/  base-4.8.1.0:Control.Applicative a283901553892ce761385d18e455c2ce
import  -/  base-4.8.1.0:Control.Exception ad90805da5ad455017893997acf84ba2
import  -/  base-4.8.1.0:Control.Exception.Base da2438b8a9b2933da5a60a968b3e3fac
import  -/  base-4.8.1.0:Control.Monad dfea142d91349c4861427789d50d5b80
import  -/  base-4.8.1.0:Data.Foldable 2e5acb797cfda6b3b7fabd7052abe290
import  -/  base-4.8.1.0:Data.Functor 5c701b0af1708f0192a25dfe14ce6274
import  -/  base-4.8.1.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.1.0:Data.Traversable 89769555cf5e62f4edd3d085405c2caa
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.Exception 49d670c608baf8e437c7e0f453690e18
import  -/  base-4.8.1.0:GHC.List f31ed8784b3e05f1397195751f7d74ea
import  -/  base-4.8.1.0:GHC.Read cfaa50b414b9b02ef6fe4fe5600d9b95
import  -/  base-4.8.1.0:GHC.Show b8c65ca3124f92a166c9f05120382442
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  base-4.8.1.0:System.IO d541b8bdf18c04de3ab7ea0277c4eba3
import  -/  directory-1.2.2.0@direc_KowvXytSqazBcvN7MGpFtg:System.Directory e213821d92cebb4dc934424f9b152303
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  safe-0.3.9@safe_BXSoeRP9IFG6t9s3abNgVi:Safe aeae112f34c10406fbf4ba13f5b20512
import  -/  Data.TTask.Command 2d97064aa371b75633b4570d81081dfc
  exports: 97b393af40677afea29b7a3ae9f307da
import  -/  Data.TTask.Command.Add 00b9832e3d9577463ef367f1b1bfc67f
  newProject edb8530c86ff47b091fbb5a469f0098c
import  -/  Data.TTask.Types 53600b9547fce3e645332f8159673fe4
  exports: be18ddcf96231cbf82b74266a19fefcc
  Project 8e3e83a4be85f8c7d6dcea853bd9dbcb
e1f849fe91307ee24c6ec67ad15cd8f2
  $fEqSuccess :: GHC.Classes.Eq Data.TTask.File.Success
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.TTask.File.Success
                  Data.TTask.File.$fEqSuccess_$c==
                  Data.TTask.File.$fEqSuccess_$c/= -}
e1f849fe91307ee24c6ec67ad15cd8f2
  $fEqSuccess_$c/= ::
    Data.TTask.File.Success
    -> Data.TTask.File.Success -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a3 :: Data.TTask.File.Success b :: Data.TTask.File.Success ->
                 case a3 of wild {
                   Data.TTask.File.Success
                   -> case b of wild1 {
                        Data.TTask.File.Success -> GHC.Types.False
                        Data.TTask.File.Failure -> GHC.Types.True }
                   Data.TTask.File.Failure
                   -> case b of wild1 {
                        Data.TTask.File.Success -> GHC.Types.True
                        Data.TTask.File.Failure -> GHC.Types.False } }) -}
e1f849fe91307ee24c6ec67ad15cd8f2
  $fEqSuccess_$c== ::
    Data.TTask.File.Success
    -> Data.TTask.File.Success -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Data.TTask.File.Success ds1 :: Data.TTask.File.Success ->
                 case ds of wild {
                   Data.TTask.File.Success
                   -> case ds1 of wild1 {
                        Data.TTask.File.Success -> GHC.Types.True
                        Data.TTask.File.Failure -> GHC.Types.False }
                   Data.TTask.File.Failure
                   -> case ds1 of wild1 {
                        Data.TTask.File.Success -> GHC.Types.False
                        Data.TTask.File.Failure -> GHC.Types.True } }) -}
e1f849fe91307ee24c6ec67ad15cd8f2
  $fReadSuccess :: GHC.Read.Read Data.TTask.File.Success
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.TTask.File.Success
                  Data.TTask.File.$fReadSuccess_$s$dmreadsPrec
                  Data.TTask.File.$fReadSuccess_$sreadListDefault
                  Data.TTask.File.$fReadSuccess_$creadPrec
                  Data.TTask.File.$fReadSuccess_$creadListPrec -}
e1f849fe91307ee24c6ec67ad15cd8f2
  $fReadSuccess1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Data.TTask.File.Success] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [Data.TTask.File.Success]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ Data.TTask.File.Success
                   Data.TTask.File.$fReadSuccess2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <Data.TTask.File.Success>_R))
                   @ b
                   eta1) -}
e1f849fe91307ee24c6ec67ad15cd8f2
  $fReadSuccess10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Data.TTask.File.Success -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Data.TTask.File.Success
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta Data.TTask.File.Success) -}
a064f01f7bd553f142bec8b356a51864
  $fReadSuccess11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Success"#) -}
e1f849fe91307ee24c6ec67ad15cd8f2
  $fReadSuccess2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Data.TTask.File.Success
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ Data.TTask.File.Success
                   Data.TTask.File.$fReadSuccess3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <Data.TTask.File.Success>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <Data.TTask.File.Success>_R)))) -}
e1f849fe91307ee24c6ec67ad15cd8f2
  $fReadSuccess3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Data.TTask.File.Success -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: Data.TTask.File.Success
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ Data.TTask.File.Success
                   Data.TTask.File.$fReadSuccess4
                   eta
                   @ b
                   eta1) -}
e1f849fe91307ee24c6ec67ad15cd8f2
  $fReadSuccess4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Data.TTask.File.Success)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Data.TTask.File.Success)
                   Data.TTask.File.$fReadSuccess9
                   Data.TTask.File.$fReadSuccess5) -}
e1f849fe91307ee24c6ec67ad15cd8f2
  $fReadSuccess5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Data.TTask.File.Success)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Data.TTask.File.Success)
                   Data.TTask.File.$fReadSuccess6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           Data.TTask.File.Success))) -}
e1f849fe91307ee24c6ec67ad15cd8f2
  $fReadSuccess6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Data.TTask.File.Success)
  {- Strictness: m,
     Unfolding: ((Data.TTask.File.$fReadSuccess8,
                  Data.TTask.File.$fReadSuccess7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <Data.TTask.File.Success>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <Data.TTask.File.Success>_R))))) -}
e1f849fe91307ee24c6ec67ad15cd8f2
  $fReadSuccess7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Data.TTask.File.Success -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Data.TTask.File.Success
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta Data.TTask.File.Failure) -}
cf01c5af4f2d0e731997d7a2e408e9a8
  $fReadSuccess8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Failure"#) -}
e1f849fe91307ee24c6ec67ad15cd8f2
  $fReadSuccess9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Data.TTask.File.Success)
  {- Strictness: m,
     Unfolding: ((Data.TTask.File.$fReadSuccess11,
                  Data.TTask.File.$fReadSuccess10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <Data.TTask.File.Success>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <Data.TTask.File.Success>_R))))) -}
e1f849fe91307ee24c6ec67ad15cd8f2
  $fReadSuccess_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Data.TTask.File.Success]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Data.TTask.File.$fReadSuccess1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[Data.TTask.File.Success]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[Data.TTask.File.Success]>_R))) -}
e1f849fe91307ee24c6ec67ad15cd8f2
  $fReadSuccess_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Data.TTask.File.Success
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Data.TTask.File.$fReadSuccess2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <Data.TTask.File.Success>_R)) -}
e1f849fe91307ee24c6ec67ad15cd8f2
  $fReadSuccess_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS Data.TTask.File.Success
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ Data.TTask.File.Success
                   Data.TTask.File.$fReadSuccess_$creadPrec
                   eta) -}
e1f849fe91307ee24c6ec67ad15cd8f2
  $fReadSuccess_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [Data.TTask.File.Success]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [Data.TTask.File.Success]
                   ((Data.TTask.File.$fReadSuccess_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[Data.TTask.File.Success]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[Data.TTask.File.Success]>_R)
                      @ [Data.TTask.File.Success]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [Data.TTask.File.Success]))) -}
e1f849fe91307ee24c6ec67ad15cd8f2
  $fShowSuccess :: GHC.Show.Show Data.TTask.File.Success
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.TTask.File.Success
                  Data.TTask.File.$fShowSuccess_$cshowsPrec
                  Data.TTask.File.$fShowSuccess_$cshow
                  Data.TTask.File.$fShowSuccess_$cshowList -}
e1f849fe91307ee24c6ec67ad15cd8f2
  $fShowSuccess1 :: Data.TTask.File.Success -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Data.TTask.File.Success eta :: GHC.Base.String ->
                 case ds of wild {
                   Data.TTask.File.Success
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Data.TTask.File.$fReadSuccess11)
                        eta
                   Data.TTask.File.Failure
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Data.TTask.File.$fReadSuccess8)
                        eta }) -}
e1f849fe91307ee24c6ec67ad15cd8f2
  $fShowSuccess_$cshow :: Data.TTask.File.Success -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Data.TTask.File.Success ->
                 case x of wild {
                   Data.TTask.File.Success -> Data.TTask.File.$fReadSuccess11
                   Data.TTask.File.Failure -> Data.TTask.File.$fReadSuccess8 }) -}
e1f849fe91307ee24c6ec67ad15cd8f2
  $fShowSuccess_$cshowList ::
    [Data.TTask.File.Success] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Data.TTask.File.Success
                   Data.TTask.File.$fShowSuccess1) -}
e1f849fe91307ee24c6ec67ad15cd8f2
  $fShowSuccess_$cshowsPrec ::
    GHC.Types.Int -> Data.TTask.File.Success -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: Data.TTask.File.Success
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   Data.TTask.File.Success
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Data.TTask.File.$fReadSuccess11)
                        eta
                   Data.TTask.File.Failure
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Data.TTask.File.$fReadSuccess8)
                        eta }) -}
e1f849fe91307ee24c6ec67ad15cd8f2
  data Success = Success | Failure
    Promotable
8473e4677b8456201b2dc9e16c9e49e7
  activeMemoryFile :: GHC.Types.IO GHC.Base.String
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.TTask.File.activeMemoryFile1
                  `cast`
                (Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)) -}
86593ca4e36a53aff6fcf7410e637fe0
  activeMemoryFile1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.catch#
                        @ GHC.Base.String
                        @ GHC.Exception.SomeException
                        System.Directory.getHomeDirectory4
                        System.Directory.getHomeDirectory2
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    GHC.Base.++
                      @ GHC.Types.Char
                      ipv1
                      Data.TTask.File.activeMemoryFile2 #) }) -}
78af9ad3c39b6c10c654bf05d28c8a97
  activeMemoryFile2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/.ttask/active"#) -}
5f6793536447231bdc399d01a8222272
  activeProjectName :: GHC.Types.IO (GHC.Base.Maybe GHC.Base.String)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.TTask.File.activeProjectName1
                  `cast`
                (Sym (GHC.Types.NTCo:IO[0] <GHC.Base.Maybe GHC.Base.String>_R)) -}
172fbaae131d6fadf89fa99ed5453bda
  activeProjectName1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe GHC.Base.String #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.catch#
                        @ GHC.Base.String
                        @ GHC.Exception.SomeException
                        System.Directory.getHomeDirectory4
                        System.Directory.getHomeDirectory2
                        s of ds1 { (#,#) ipv ipv1 ->
                 let {
                   ipv2 :: GHC.Base.String
                   = GHC.Base.++
                       @ GHC.Types.Char
                       ipv1
                       Data.TTask.File.activeMemoryFile2
                 } in
                 case System.Directory.doesFileExist1
                        ipv2
                        ipv of ds2 { (#,#) ipv3 ipv4 ->
                 case ipv4 of wild {
                   GHC.Types.False
                   -> case System.IO.writeFile1
                             ipv2
                             (GHC.Types.[] @ GHC.Types.Char)
                             ipv3 of ds3 { (#,#) ipv5 ipv6 ->
                      (# ipv5, GHC.Base.Nothing @ GHC.Base.String #) }
                   GHC.Types.True
                   -> case GHC.IO.Handle.FD.openFile1
                             ipv2
                             GHC.IO.IOMode.ReadMode
                             ipv3 of ds3 { (#,#) ipv5 ipv6 ->
                      case GHC.IO.Handle.Text.hGetContents1
                             ipv6
                             ipv5 of ds4 { (#,#) ipv7 ipv8 ->
                      (# ipv7, GHC.Base.Just @ GHC.Base.String ipv8 #) } } } } }) -}
4201d803c88a5b0968396afde44360d2
  findProjects :: GHC.Types.IO [GHC.Base.String]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.TTask.File.findProjects1
                  `cast`
                (Sym (GHC.Types.NTCo:IO[0] <[GHC.Base.String]>_R)) -}
17df3d258b57ceb632c6e6b3dde6ec0d
  findProjects1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Base.String] #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Data.TTask.File.findProjects5 s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    case ipv1 of wild {
                      GHC.Base.Nothing -> GHC.Types.[] @ [GHC.Types.Char]
                      GHC.Base.Just v
                      -> GHC.Base.build
                           @ [GHC.Types.Char]
                           (\ @ b c :: [GHC.Types.Char] -> b -> b[OneShot] n :: b[OneShot] ->
                            GHC.Base.foldr
                              @ [GHC.Types.Char]
                              @ b
                              (GHC.List.filterFB
                                 @ [GHC.Types.Char]
                                 @ b
                                 c
                                 Data.TTask.File.findProjects2)
                              n
                              v) } #) }) -}
9f1e249c7b9e347075a5829045f76d61
  findProjects2 :: [GHC.Types.Char] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ s :: [GHC.Types.Char] ->
                 case GHC.Classes.$fEq[]_$s$c==1
                        s
                        Data.TTask.File.findProjects4 of wild {
                   GHC.Types.False
                   -> GHC.Classes.$fEq[]_$s$c/=1 s Data.TTask.File.findProjects3
                   GHC.Types.True -> GHC.Types.False }) -}
ebb6679bf99965eba099ae277f221ac4
  findProjects3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ".."#) -}
6db871da8efa47d42cfb60bcce77cee0
  findProjects4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "."#) -}
ee403883edac877764c23ce2d99217e8
  findProjects5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe [GHC.Base.String] #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.catch#
                        @ GHC.Base.String
                        @ GHC.Exception.SomeException
                        System.Directory.getHomeDirectory4
                        System.Directory.getHomeDirectory2
                        s of ds1 { (#,#) ipv ipv1 ->
                 GHC.Prim.catch#
                   @ (GHC.Base.Maybe [GHC.Base.String])
                   @ GHC.Exception.SomeException
                   (\ s1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                    case System.Directory.getDirectoryContents1
                           (GHC.Base.++ @ GHC.Types.Char ipv1 Data.TTask.File.findProjects7)
                           s1 of ds2 { (#,#) ipv2 ipv3 ->
                    (# ipv2, GHC.Base.Just @ [GHC.Base.String] ipv3 #) })
                   Data.TTask.File.findProjects6
                   ipv }) -}
37f0e70ff4e98885a519c51123e04b59
  findProjects6 ::
    GHC.Exception.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe [GHC.Base.String] #)
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ e1 :: GHC.Exception.SomeException[OneShot]
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta, GHC.Base.Nothing @ [GHC.Base.String] #)) -}
0ec4b585840a1176bfaa4ae8f7224759
  findProjects7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/.ttask/projects"#) -}
550c3f4bd7b79ccfd3bf68698604f273
  getDirectoryContentsMay ::
    GHC.Base.String -> GHC.Types.IO (GHC.Base.Maybe [GHC.Base.String])
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.TTask.File.getDirectoryContentsMay1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <GHC.Base.Maybe [GHC.Base.String]>_R)) -}
84d1cdbc12c5f5a08fb6f8587f703995
  getDirectoryContentsMay1 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe [GHC.Base.String] #)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ path :: GHC.Base.String
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 GHC.Prim.catch#
                   @ (GHC.Base.Maybe [GHC.Base.String])
                   @ GHC.Exception.SomeException
                   (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                    case System.Directory.getDirectoryContents1
                           path
                           s of ds1 { (#,#) ipv ipv1 ->
                    (# ipv, GHC.Base.Just @ [GHC.Base.String] ipv1 #) })
                   (\ e1 :: GHC.Exception.SomeException[OneShot]
                      eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                    (# eta1, GHC.Base.Nothing @ [GHC.Base.String] #))
                   eta) -}
7bdc51867b42728703d526002d034a47
  initDirectory :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.TTask.File.initDirectory1
                  `cast`
                (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
ae0a31e40edaca1549188fb03c4cf41f
  initDirectory1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.catch#
                        @ GHC.Base.String
                        @ GHC.Exception.SomeException
                        System.Directory.getHomeDirectory4
                        System.Directory.getHomeDirectory2
                        s of ds1 { (#,#) ipv ipv1 ->
                 case System.Directory.createDirectoryIfMissing1
                        GHC.Types.False
                        (GHC.Base.++ @ GHC.Types.Char ipv1 Data.TTask.File.initDirectory2)
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.catch#
                        @ GHC.Base.String
                        @ GHC.Exception.SomeException
                        System.Directory.getHomeDirectory4
                        System.Directory.getHomeDirectory2
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 System.Directory.createDirectoryIfMissing1
                   GHC.Types.False
                   (GHC.Base.++ @ GHC.Types.Char ipv5 Data.TTask.File.findProjects7)
                   ipv4 } } }) -}
86244f9c6c8e914309d6362f7932fca5
  initDirectory2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/.ttask"#) -}
8631b7675990101fb6ad0d4d3d675949
  initProjectFile ::
    GHC.Base.String -> GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.TTask.File.initProjectFile1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
5a66db9383ef129783cfc68322a2f8e5
  initProjectFile1 ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>,
     Unfolding: (\ id :: GHC.Base.String
                   name :: GHC.Base.String
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Data.Time.LocalTime.LocalTime.getZonedTime1
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.catch#
                        @ GHC.Base.String
                        @ GHC.Exception.SomeException
                        System.Directory.getHomeDirectory4
                        System.Directory.getHomeDirectory2
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case System.IO.writeFile1
                        (GHC.Base.++
                           @ GHC.Types.Char
                           (GHC.Base.++ @ GHC.Types.Char ipv3 Data.TTask.File.findProjects7)
                           (GHC.CString.unpackAppendCString# "/"# id))
                        (Data.TTask.Types.$w$cshowsPrec
                           0
                           name
                           (GHC.Types.[] @ Data.TTask.Types.UserStory)
                           (GHC.Types.[] @ Data.TTask.Types.Sprint)
                           (Data.TTask.Types.TStatusOne
                              (Data.TTask.Types.StatusWait
                                 (Data.Time.LocalTime.LocalTime.zonedTimeToLocalTime ipv1)))
                           (GHC.Types.[] @ GHC.Types.Char))
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case Data.TTask.File.initProjectFile2
                        id
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 (# ipv6, GHC.Tuple.() #) } } } }) -}
f78dfabb808e1c8fc8788b7c163a96ba
  initProjectFile2 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.TTask.File.Success #)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ id :: GHC.Base.String
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.catch#
                        @ GHC.Base.String
                        @ GHC.Exception.SomeException
                        System.Directory.getHomeDirectory4
                        System.Directory.getHomeDirectory2
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case Data.TTask.File.findProjects5 ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild {
                   GHC.Base.Nothing
                   -> case GHC.List.elem
                             @ GHC.Base.String
                             GHC.Classes.$fEq[]_$s$fEq[]1
                             id
                             (GHC.Types.[] @ [GHC.Types.Char]) of wild1 {
                        GHC.Types.False -> (# ipv2, Data.TTask.File.Failure #)
                        GHC.Types.True
                        -> case System.IO.writeFile1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     ipv1
                                     Data.TTask.File.activeMemoryFile2)
                                  id
                                  ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                           (# ipv4, Data.TTask.File.Success #) } }
                   GHC.Base.Just v
                   -> case GHC.List.elem
                             @ GHC.Base.String
                             GHC.Classes.$fEq[]_$s$fEq[]1
                             id
                             (GHC.List.filter
                                @ [GHC.Types.Char]
                                Data.TTask.File.findProjects2
                                v) of wild1 {
                        GHC.Types.False -> (# ipv2, Data.TTask.File.Failure #)
                        GHC.Types.True
                        -> case System.IO.writeFile1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     ipv1
                                     Data.TTask.File.activeMemoryFile2)
                                  id
                                  ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                           (# ipv4, Data.TTask.File.Success #) } } } } }) -}
8ffe8b08bf0c2cc157d26ccf5d11f238
  projectsDirectory :: GHC.Types.IO GHC.Base.String
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.TTask.File.projectsDirectory1
                  `cast`
                (Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)) -}
ceab98213e3ffdc202fe0d6d2cf215d1
  projectsDirectory1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.catch#
                        @ GHC.Base.String
                        @ GHC.Exception.SomeException
                        System.Directory.getHomeDirectory4
                        System.Directory.getHomeDirectory2
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    GHC.Base.++
                      @ GHC.Types.Char
                      ipv1
                      Data.TTask.File.findProjects7 #) }) -}
59005f4aa7521b6e3ef06d1890627061
  readActiveProject ::
    GHC.Types.IO (GHC.Base.Maybe Data.TTask.Types.Project)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.TTask.File.readActiveProject1
                  `cast`
                (Sym (GHC.Types.NTCo:IO[0]
                          <GHC.Base.Maybe Data.TTask.Types.Project>_R)) -}
48f94a524d975b1b6a9467b6777c956a
  readActiveProject1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe Data.TTask.Types.Project #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.catch#
                        @ GHC.Base.String
                        @ GHC.Exception.SomeException
                        System.Directory.getHomeDirectory4
                        System.Directory.getHomeDirectory2
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.catch#
                        @ GHC.Base.String
                        @ GHC.Exception.SomeException
                        System.Directory.getHomeDirectory4
                        System.Directory.getHomeDirectory2
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 let {
                   ipv4 :: GHC.Base.String
                   = GHC.Base.++
                       @ GHC.Types.Char
                       ipv3
                       Data.TTask.File.activeMemoryFile2
                 } in
                 case System.Directory.doesFileExist1
                        ipv4
                        ipv2 of ds3 { (#,#) ipv5 ipv6 ->
                 let {
                   $j :: GHC.Prim.State# GHC.Prim.RealWorld
                         -> GHC.Base.Maybe GHC.Base.String
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               GHC.Base.Maybe Data.TTask.Types.Project #)
                     {- Arity: 2, Strictness: <L,U><S,1*U> -}
                   = \ ipv7 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot]
                       ipv8 :: GHC.Base.Maybe GHC.Base.String[OneShot] ->
                     case ipv8 of wild {
                       GHC.Base.Nothing
                       -> (# ipv7, GHC.Base.Nothing @ Data.TTask.Types.Project #)
                       GHC.Base.Just a3
                       -> case GHC.IO.Handle.FD.openFile1
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    (GHC.Base.++
                                       @ GHC.Types.Char
                                       ipv1
                                       Data.TTask.File.findProjects7)
                                    (GHC.CString.unpackAppendCString# "/"# a3))
                                 GHC.IO.IOMode.ReadMode
                                 ipv7 of ds4 { (#,#) ipv9 ipv10 ->
                          case GHC.IO.Handle.Text.hGetContents1
                                 ipv10
                                 ipv9 of ds5 { (#,#) ipv11 ipv12 ->
                          (# ipv11,
                             case Safe.read_
                                    @ Data.TTask.Types.Project
                                    Data.TTask.Types.$fReadProject
                                    ipv12 of wild1 {
                               Data.Either.Left x -> GHC.Base.Nothing @ Data.TTask.Types.Project
                               Data.Either.Right y
                               -> GHC.Base.Just @ Data.TTask.Types.Project y } #) } } }
                 } in
                 case ipv6 of wild {
                   GHC.Types.False
                   -> case System.IO.writeFile1
                             ipv4
                             (GHC.Types.[] @ GHC.Types.Char)
                             ipv5 of ds4 { (#,#) ipv7 ipv8 ->
                      $j ipv7 (GHC.Base.Nothing @ GHC.Base.String) }
                   GHC.Types.True
                   -> case GHC.IO.Handle.FD.openFile1
                             ipv4
                             GHC.IO.IOMode.ReadMode
                             ipv5 of ds4 { (#,#) ipv7 ipv8 ->
                      case GHC.IO.Handle.Text.hGetContents1
                             ipv8
                             ipv7 of ds5 { (#,#) ipv9 ipv10 ->
                      $j ipv9 (GHC.Base.Just @ GHC.Base.String ipv10) } } } } } }) -}
20eaf2c92332472ee60d241ce2daa25c
  readProject ::
    GHC.Base.String
    -> GHC.Types.IO (GHC.Base.Maybe Data.TTask.Types.Project)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.TTask.File.readProject1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <GHC.Base.Maybe Data.TTask.Types.Project>_R)) -}
8f5876e555c3b3deb81db26a6ef7bd65
  readProject1 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe Data.TTask.Types.Project #)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ fn :: GHC.Base.String
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        fn
                        GHC.IO.IOMode.ReadMode
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    case Safe.read_
                           @ Data.TTask.Types.Project
                           Data.TTask.Types.$fReadProject
                           ipv3 of wild {
                      Data.Either.Left x -> GHC.Base.Nothing @ Data.TTask.Types.Project
                      Data.Either.Right y
                      -> GHC.Base.Just @ Data.TTask.Types.Project y } #) } }) -}
7ae484e0cb46198befb9ac7fae4d5ebe
  setActiveProject ::
    GHC.Base.String -> GHC.Types.IO Data.TTask.File.Success
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.TTask.File.initProjectFile2
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <Data.TTask.File.Success>_R)) -}
c63245baa6ac87ae67884d327bce9b5b
  workDirectory :: GHC.Types.IO GHC.Base.String
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.TTask.File.workDirectory1
                  `cast`
                (Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)) -}
da14a5c529c90cc9bcb4cb8912af4389
  workDirectory1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.catch#
                        @ GHC.Base.String
                        @ GHC.Exception.SomeException
                        System.Directory.getHomeDirectory4
                        System.Directory.getHomeDirectory2
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    GHC.Base.++
                      @ GHC.Types.Char
                      ipv1
                      Data.TTask.File.initDirectory2 #) }) -}
766acc3fbb71daccdcb99fd0bc291147
  writeActiveProject ::
    Data.TTask.Types.Project -> GHC.Types.IO Data.TTask.File.Success
  {- Arity: 2, Strictness: <L,1*U(1*U,1*U,1*U,1*U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.TTask.File.writeActiveProject1
                  `cast`
                (<Data.TTask.Types.Project>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <Data.TTask.File.Success>_R)) -}
4ad8ba786c5f86b286cd43b3b6dd6e5d
  writeActiveProject1 ::
    Data.TTask.Types.Project
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.TTask.File.Success #)
  {- Arity: 2, Strictness: <L,1*U(1*U,1*U,1*U,1*U)><L,U>,
     Unfolding: (\ pj :: Data.TTask.Types.Project
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.catch#
                        @ GHC.Base.String
                        @ GHC.Exception.SomeException
                        System.Directory.getHomeDirectory4
                        System.Directory.getHomeDirectory2
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.catch#
                        @ GHC.Base.String
                        @ GHC.Exception.SomeException
                        System.Directory.getHomeDirectory4
                        System.Directory.getHomeDirectory2
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 let {
                   ipv4 :: GHC.Base.String
                   = GHC.Base.++
                       @ GHC.Types.Char
                       ipv3
                       Data.TTask.File.activeMemoryFile2
                 } in
                 case System.Directory.doesFileExist1
                        ipv4
                        ipv2 of ds3 { (#,#) ipv5 ipv6 ->
                 let {
                   $j :: GHC.Prim.State# GHC.Prim.RealWorld
                         -> GHC.Base.Maybe GHC.Base.String
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               Data.TTask.File.Success #)
                     {- Arity: 2, Strictness: <L,U><S,1*U> -}
                   = \ ipv7 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot]
                       ipv8 :: GHC.Base.Maybe GHC.Base.String[OneShot] ->
                     case ipv8 of wild {
                       GHC.Base.Nothing -> (# ipv7, Data.TTask.File.Failure #)
                       GHC.Base.Just a3
                       -> case System.IO.writeFile1
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    (GHC.Base.++
                                       @ GHC.Types.Char
                                       ipv1
                                       Data.TTask.File.findProjects7)
                                    (GHC.Base.++
                                       @ GHC.Types.Char
                                       Data.TTask.File.writeActiveProject2
                                       a3))
                                 (Data.TTask.Types.$fShowProject_$cshow pj)
                                 ipv7 of ds { (#,#) ipv9 ipv10 ->
                          (# ipv9, Data.TTask.File.Success #) } }
                 } in
                 case ipv6 of wild {
                   GHC.Types.False
                   -> case System.IO.writeFile1
                             ipv4
                             (GHC.Types.[] @ GHC.Types.Char)
                             ipv5 of ds4 { (#,#) ipv7 ipv8 ->
                      $j ipv7 (GHC.Base.Nothing @ GHC.Base.String) }
                   GHC.Types.True
                   -> case GHC.IO.Handle.FD.openFile1
                             ipv4
                             GHC.IO.IOMode.ReadMode
                             ipv5 of ds4 { (#,#) ipv7 ipv8 ->
                      case GHC.IO.Handle.Text.hGetContents1
                             ipv8
                             ipv7 of ds5 { (#,#) ipv9 ipv10 ->
                      $j ipv9 (GHC.Base.Just @ GHC.Base.String ipv10) } } } } } }) -}
850960109435925a97b177c5058a9c09
  writeActiveProject2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/"#) -}
afe92e0a33492c55a4ec711db31b724b
  writeProject ::
    GHC.Base.String -> Data.TTask.Types.Project -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U><L,1*U(1*U,1*U,1*U,1*U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.TTask.File.writeProject1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <Data.TTask.Types.Project>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
c0fa6254e94ff1614973cf0ee7a333b4
  writeProject1 ::
    GHC.Base.String
    -> Data.TTask.Types.Project
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,1*U(1*U,1*U,1*U,1*U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ fn :: GHC.Base.String
                   pj :: Data.TTask.Types.Project
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 System.IO.writeFile1
                   fn
                   (Data.TTask.Types.$fShowProject_$cshow pj)
                   eta) -}
instance GHC.Classes.Eq [Data.TTask.File.Success]
  = Data.TTask.File.$fEqSuccess
instance GHC.Read.Read [Data.TTask.File.Success]
  = Data.TTask.File.$fReadSuccess
instance GHC.Show.Show [Data.TTask.File.Success]
  = Data.TTask.File.$fShowSuccess
"SPEC/Data.TTask.File $dmreadsPrec @ Success" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                          Data.TTask.File.Success
  GHC.Read.$dmreadsPrec @ Data.TTask.File.Success $dRead
  = Data.TTask.File.$fReadSuccess_$s$dmreadsPrec
"SPEC/Data.TTask.File readListDefault @ Success" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                             Data.TTask.File.Success
  GHC.Read.readListDefault @ Data.TTask.File.Success $dRead
  = Data.TTask.File.$fReadSuccess_$sreadListDefault
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

