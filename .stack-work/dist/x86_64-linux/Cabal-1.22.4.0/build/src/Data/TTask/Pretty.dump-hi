
==================== FINAL INTERFACE ====================
2016-05-03 07:07:39.922896 UTC

interface ttask_72zq9oHyfMzKhn7BjotlNr:Data.TTask.Pretty 7102
  interface hash: 237f879b96dff45ed7d4de94f3d7f5e5
  ABI hash: 0dd4ac05e5586b821e862e1719bb8c03
  export-list hash: 71a3311e5ce247a9f205a0d1f2afdd63
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b26dd936ccefa5ad3cd3de66a901780e
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.TTask.Pretty.formatFamily
  Data.TTask.Pretty.formatRecord
  Data.TTask.Pretty.formatRecordShowedId
  Data.TTask.Pretty.ppActive
  Data.TTask.Pretty.ppProjectHeader
  Data.TTask.Pretty.ppProjectPbl
  Data.TTask.Pretty.ppProjectSprint
  Data.TTask.Pretty.ppProjectSprintDetail
  Data.TTask.Pretty.ppProjectSprintList
  Data.TTask.Pretty.ppProjectStory
  Data.TTask.Pretty.ppProjectTask
  Data.TTask.Pretty.ppSprint
  Data.TTask.Pretty.ppSprintDetail
  Data.TTask.Pretty.ppSprintHeader
  Data.TTask.Pretty.ppSprintList
  Data.TTask.Pretty.ppStatus
  Data.TTask.Pretty.ppStatusRecord
  Data.TTask.Pretty.ppStory
  Data.TTask.Pretty.ppStoryHeader
  Data.TTask.Pretty.ppStoryI
  Data.TTask.Pretty.ppStoryList
  Data.TTask.Pretty.ppTask
module dependencies: Data.TTask.Types
package dependencies: array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ
                      base-4.8.1.0* deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o
                      ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      safe-0.3.9@safe_BXSoeRP9IFG6t9s3abNgVi
                      time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.Format.Parse
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.LocalTime.LocalTime
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Generics
import  -/  base-4.8.1.0:Control.Applicative a283901553892ce761385d18e455c2ce
import  -/  base-4.8.1.0:Data.Foldable 2e5acb797cfda6b3b7fabd7052abe290
import  -/  base-4.8.1.0:Data.Functor 5c701b0af1708f0192a25dfe14ce6274
import  -/  base-4.8.1.0:Data.List 2a4f5f92892d432e7113f64cd9dcca53
import  -/  base-4.8.1.0:Data.OldList 21f46c368c20a00483b41333e53a55cb
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.List f31ed8784b3e05f1397195751f7d74ea
import  -/  base-4.8.1.0:GHC.Show b8c65ca3124f92a166c9f05120382442
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  Data.TTask.Types 53600b9547fce3e645332f8159673fe4
  exports: be18ddcf96231cbf82b74266a19fefcc
  Id 89e52418972f0d5f81e790e20b930373
  Point 20f1a74859b814c5a3be9809e9044e5f
  Project 8e3e83a4be85f8c7d6dcea853bd9dbcb
  Sprint c3034c815bf33d3a16be1a6dc834186c
  StatusFinished 5b244249a4c6ebac7682b4d8594f05f3
  StatusNotAchieved eb3585a6e15b6d9ecb066145eff9c6fc
  StatusReject 2595a6c58ff7b86f5318bfdce35869f4
  StatusRunning c4ee6243b4ef6cdc0b8503893f535181
  StatusWait 49444f524fb08b408c45848c1fa5733a
  TStatus e3c4120da1cd7046b6791c8f7bf47f4f
  TStatusRecord 86bd241592c4e05830e227b89c779134
  Task 30af9f1a75d18f3b5ff07253deccac43
  UserStory edae4947a6c7bbdf6144725474863e99
  calcProjectPoint bf93521d72db5ec8df757d9a4fa2ab9d
  calcSprintPoint 24e98073c04eb5000892fd84c0546beb
  calcStoryPoint 17c599544775bdd08785f22d08cca1f6
  getLastStatus 0bf7805b66496395236f649da29d64c6
  getSprintById 5af24abadd846800aa0f3934c2a9c04b
  getStatusTime 72e7e21ac00b87f916d20bfe9194213c
  getTaskById 5a00d750a67466eb705e3fcf9c24859b
  getUserStoryById 3b8b33b585ecd3a2d8a096baaaf20ad1
  isRunning 7e8ac2ffe931e1de6a31285d348d486e
  projectBacklog e995ffa6d66c36f13f0f41a72180b374
  projectName 5262ebafdeeecd30e7724516fb3e11a4
  projectSprints 5af965e26643b99f22685b2e9bfcec1e
  projectStatus 26b1e82b5152ad145304a5af1748d537
  sprintDescription 61754c48f603e3cb150cada175ef7ce9
  sprintId bacdc9239d66a6e0d5122ab793be49d2
  sprintStatus ca89dbff1536ca53062a2d825e5b918b
  sprintStorys 3278e9d1b6d5f296df0fb53f0fd61b18
  statusToList 5ba979c97f38d6e492b726b5cb3e0add
  storyDescription 98a75f236458a6bc48578c3508fc9a11
  storyId 9363c6272f78959f6e2b03f2baa11912
  storyStatus 9762304227c7e88c5e9dd8cb17058b7c
  storyTasks 3300a99ccbe6da0606cfe15ec51eedf6
  taskDescription e0b8214345582c4290373e9ac2e03aaa
  taskId 1c52271f38b72728b99a70fde674f96d
  taskPoint 4aa461bab0afb6d9b8a0f85010442cdf
  taskStatus 82017d4268f256bd3b5d49058b2036e6
db996cf2a65cbb9b4d438a1970d74b1e
  $wppProjectStory ::
    Data.TTask.Types.Id
    -> [Data.TTask.Types.UserStory]
    -> [Data.TTask.Types.Sprint]
    -> GHC.Base.Maybe GHC.Base.String
  {- Arity: 3, Strictness: <L,U(U)><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ w :: Data.TTask.Types.Id
                   ww :: [Data.TTask.Types.UserStory]
                   ww1 :: [Data.TTask.Types.Sprint] ->
                 case Data.TTask.Types.$wgetUserStoryById ww ww1 w of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ GHC.Base.String
                   GHC.Base.Just a1
                   -> GHC.Base.Just
                        @ GHC.Base.String
                        (Data.TTask.Pretty.ppStory a1) }) -}
795b803b1432270339f0838bc52bb95d
  $wppProjectTask ::
    Data.TTask.Types.Id
    -> [Data.TTask.Types.UserStory]
    -> [Data.TTask.Types.Sprint]
    -> GHC.Base.Maybe GHC.Base.String
  {- Arity: 3, Strictness: <L,U(U)><L,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ w :: Data.TTask.Types.Id
                   ww :: [Data.TTask.Types.UserStory]
                   ww1 :: [Data.TTask.Types.Sprint] ->
                 case Data.TTask.Types.$wgetTaskById ww ww1 w of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ GHC.Base.String
                   GHC.Base.Just a1
                   -> GHC.Base.Just
                        @ GHC.Base.String
                        (Data.TTask.Pretty.ppTask a1) }) -}
d3d5a8a9dee9440790d6b8c2e876a9ce
  $wxs :: GHC.Prim.Int# -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
de07fffbff68fc3b80a0fccbefc3e590
  $wxs1 :: GHC.Prim.Int# -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
ab56fe7c962bebde6d7d761113d5d641
  $wxs2 :: GHC.Prim.Int# -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
b8ceba695a9fcfea2b09161f3ddd4a38
  formatFamily ::
    GHC.Classes.Eq b =>
    GHC.Types.Int
    -> a
    -> (a -> GHC.Base.String)
    -> (a -> [b])
    -> (b -> GHC.Base.String)
    -> GHC.Base.String
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),A)><L,1*U(U)><L,U><C(S),1*C1(U)><L,C(U)><L,C(U)>,
     Unfolding: (\ @ a
                   @ b
                   $dEq :: GHC.Classes.Eq b
                   r :: GHC.Types.Int
                   x1 :: a
                   f :: a -> GHC.Base.String
                   g :: a -> [b]
                   h :: b -> GHC.Base.String ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (f x1)
                   (let {
                      a1 :: [GHC.Types.Char]
                      = case GHC.Base.map
                               @ b
                               @ [GHC.Types.Char]
                               (let {
                                  a2 :: [GHC.Types.Char]
                                  = case r of wild1 { GHC.Types.I# y ->
                                    case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.<# 0 y) of wild {
                                      GHC.Types.False -> GHC.Types.[] @ GHC.Types.Char
                                      GHC.Types.True -> Data.TTask.Pretty.$wxs2 y } }
                                } in
                                \ x2 :: b -> GHC.Base.++ @ GHC.Types.Char a2 (h x2))
                               (g x1) of wild {
                          [] -> GHC.Types.[] @ GHC.Types.Char
                          : x2 xs1
                          -> Data.OldList.intercalate_$spoly_go
                               @ GHC.Types.Char
                               x2
                               (Data.OldList.prependToAll
                                  @ [GHC.Types.Char]
                                  Data.TTask.Pretty.formatFamily1
                                  xs1) }
                    } in
                    case GHC.Classes.$fEq[]_$c==
                           @ b
                           $dEq
                           (g x1)
                           (GHC.Types.[] @ b) of wild {
                      GHC.Types.False
                      -> GHC.Base.++ @ GHC.Types.Char Data.TTask.Pretty.formatFamily1 a1
                      GHC.Types.True -> a1 })) -}
cb91304933a403a667c5b0486f28d587
  formatFamily1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\n"#) -}
440ebe11647e01339a66dea73d7cd52e
  formatFamily_$sformatFamily ::
    GHC.Types.Int
    -> a
    -> (a -> GHC.Base.String)
    -> (a -> [Data.TTask.Types.Task])
    -> (Data.TTask.Types.Task -> GHC.Base.String)
    -> GHC.Base.String
  {- Arity: 5,
     Strictness: <L,1*U(U)><L,U><C(S),1*C1(U)><L,C(U)><L,C(U)>,
     Unfolding: (\ @ a
                   r :: GHC.Types.Int
                   x1 :: a
                   f :: a -> GHC.Base.String
                   g :: a -> [Data.TTask.Types.Task]
                   h :: Data.TTask.Types.Task -> GHC.Base.String ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (f x1)
                   (let {
                      a1 :: [GHC.Types.Char]
                      = case GHC.Base.map
                               @ Data.TTask.Types.Task
                               @ [GHC.Types.Char]
                               (let {
                                  a2 :: [GHC.Types.Char]
                                  = case r of wild1 { GHC.Types.I# y ->
                                    case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.<# 0 y) of wild {
                                      GHC.Types.False -> GHC.Types.[] @ GHC.Types.Char
                                      GHC.Types.True -> Data.TTask.Pretty.$wxs y } }
                                } in
                                \ x2 :: Data.TTask.Types.Task ->
                                GHC.Base.++ @ GHC.Types.Char a2 (h x2))
                               (g x1) of wild {
                          [] -> GHC.Types.[] @ GHC.Types.Char
                          : x2 xs1
                          -> Data.OldList.intercalate_$spoly_go
                               @ GHC.Types.Char
                               x2
                               (Data.OldList.prependToAll
                                  @ [GHC.Types.Char]
                                  Data.TTask.Pretty.formatFamily1
                                  xs1) }
                    } in
                    case GHC.Classes.$fEq[]_$c==
                           @ Data.TTask.Types.Task
                           Data.TTask.Types.$fEqTask
                           (g x1)
                           (GHC.Types.[] @ Data.TTask.Types.Task) of wild {
                      GHC.Types.False
                      -> GHC.Base.++ @ GHC.Types.Char Data.TTask.Pretty.formatFamily1 a1
                      GHC.Types.True -> a1 })) -}
1098df9c297992ef76bd79f51c706574
  formatFamily_$sformatFamily1 ::
    GHC.Types.Int
    -> a
    -> (a -> GHC.Base.String)
    -> (a -> [Data.TTask.Types.UserStory])
    -> (Data.TTask.Types.UserStory -> GHC.Base.String)
    -> GHC.Base.String
  {- Arity: 5,
     Strictness: <L,1*U(U)><L,U><C(S),1*C1(U)><L,C(U)><L,C(U)>,
     Unfolding: (\ @ a
                   r :: GHC.Types.Int
                   x1 :: a
                   f :: a -> GHC.Base.String
                   g :: a -> [Data.TTask.Types.UserStory]
                   h :: Data.TTask.Types.UserStory -> GHC.Base.String ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (f x1)
                   (let {
                      a1 :: [GHC.Types.Char]
                      = case GHC.Base.map
                               @ Data.TTask.Types.UserStory
                               @ [GHC.Types.Char]
                               (let {
                                  a2 :: [GHC.Types.Char]
                                  = case r of wild1 { GHC.Types.I# y ->
                                    case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.<# 0 y) of wild {
                                      GHC.Types.False -> GHC.Types.[] @ GHC.Types.Char
                                      GHC.Types.True -> Data.TTask.Pretty.$wxs1 y } }
                                } in
                                \ x2 :: Data.TTask.Types.UserStory ->
                                GHC.Base.++ @ GHC.Types.Char a2 (h x2))
                               (g x1) of wild {
                          [] -> GHC.Types.[] @ GHC.Types.Char
                          : x2 xs1
                          -> Data.OldList.intercalate_$spoly_go
                               @ GHC.Types.Char
                               x2
                               (Data.OldList.prependToAll
                                  @ [GHC.Types.Char]
                                  Data.TTask.Pretty.formatFamily1
                                  xs1) }
                    } in
                    case GHC.Classes.$fEq[]_$c==
                           @ Data.TTask.Types.UserStory
                           Data.TTask.Types.$fEqUserStory
                           (g x1)
                           (GHC.Types.[] @ Data.TTask.Types.UserStory) of wild {
                      GHC.Types.False
                      -> GHC.Base.++ @ GHC.Types.Char Data.TTask.Pretty.formatFamily1 a1
                      GHC.Types.True -> a1 })) -}
94921dca1b1644b42421c965d707b3ee
  formatRecord ::
    GHC.Base.String
    -> Data.TTask.Types.Id
    -> Data.TTask.Types.Point
    -> Data.TTask.Types.TStatus
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <S,1*U><L,1*U(U)><L,1*U(U)><L,1*U><L,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ htype :: GHC.Base.String
                   i :: Data.TTask.Types.Id
                   point :: Data.TTask.Types.Point
                   st :: Data.TTask.Types.TStatus
                   description :: GHC.Base.String ->
                 Data.TTask.Pretty.formatRecordShowedId
                   htype
                   (GHC.Show.$fShowInt_$cshow i)
                   point
                   st
                   description) -}
3fa2772f6eb3d7aa0d3347a6023d4319
  formatRecordShowedId ::
    GHC.Base.String
    -> GHC.Base.String
    -> Data.TTask.Types.Point
    -> Data.TTask.Types.TStatus
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <S,1*U><L,1*U><L,1*U(U)><L,1*U><L,1*U> -}
03566084a390badef539ebd81c8a14e8
  ppActive ::
    GHC.Base.String -> Data.TTask.Types.Project -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,U(U,U,U,U)>,
     Unfolding: (\ pid :: GHC.Base.String
                   pj :: Data.TTask.Types.Project ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (Data.TTask.Pretty.ppProjectHeader pid pj)
                   (case pj of wild { Data.TTask.Types.Project ds1 ds2 ds3 ds4 ->
                    let {
                      a :: [GHC.Types.Char]
                      = let {
                          a1 :: [GHC.Types.Char]
                          = case GHC.Classes.$fEq[]_$c==
                                   @ Data.TTask.Types.UserStory
                                   Data.TTask.Types.$fEqUserStory
                                   ds2
                                   (GHC.Types.[] @ Data.TTask.Types.UserStory) of wild1 {
                              GHC.Types.False
                              -> GHC.Base.++
                                   @ GHC.Types.Char
                                   Data.TTask.Pretty.ppActive4
                                   (Data.TTask.Pretty.ppStoryList ds2)
                              GHC.Types.True -> Data.TTask.Pretty.ppStoryList ds2 }
                        } in
                        case Data.TTask.Pretty.ppActive_go ds3 of wild1 {
                          [] -> a1
                          : x1 xs1
                          -> GHC.Base.++
                               @ GHC.Types.Char
                               (Data.OldList.intercalate_$spoly_go
                                  @ GHC.Types.Char
                                  x1
                                  (Data.OldList.prependToAll
                                     @ [GHC.Types.Char]
                                     Data.TTask.Pretty.formatFamily1
                                     xs1))
                               a1 }
                    } in
                    case GHC.Classes.$fEq[]_$c==
                           @ Data.TTask.Types.Sprint
                           Data.TTask.Types.$fEqSprint
                           (GHC.List.filter
                              @ Data.TTask.Types.Sprint
                              Data.TTask.Pretty.ppActive3
                              ds3)
                           (GHC.Types.[] @ Data.TTask.Types.Sprint) of wild1 {
                      GHC.Types.False
                      -> GHC.Base.++ @ GHC.Types.Char Data.TTask.Pretty.ppActive2 a
                      GHC.Types.True
                      -> GHC.Base.++
                           @ GHC.Types.Char
                           Data.TTask.Pretty.ppActive1
                           a } })) -}
464ced619607b092b121fb693fdffcd1
  ppActive1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "\n\
                   \Running sprint is nothing"#) -}
47cd4c9378df3bdca72d6ea047da7970
  ppActive2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "\n\
                   \\n\
                   \Active sprint(s) :\n"#) -}
9bbec9069789810540f7824b6892e478
  ppActive3 :: Data.TTask.Types.Sprint -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x1 :: Data.TTask.Types.Sprint ->
                 case x1 of wild { Data.TTask.Types.Sprint ds1 ds2 ds3 ds4 ->
                 case ds4 of wild1 {
                   Data.TTask.Types.TStatusCons x2 ds
                   -> case x2 of wild2 {
                        DEFAULT -> GHC.Types.False
                        Data.TTask.Types.StatusRunning ds7 -> GHC.Types.True }
                   Data.TTask.Types.TStatusOne x2
                   -> case x2 of wild2 {
                        DEFAULT -> GHC.Types.False
                        Data.TTask.Types.StatusRunning ds -> GHC.Types.True } } }) -}
1f9c7eb5ce45730711307170ccb0e732
  ppActive4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "\n\
                   \\n\
                   \Product backlog :\n"#) -}
85712f8bc1c6c3da17792e5aee46bdea
  ppActive_go :: [Data.TTask.Types.Sprint] -> [[GHC.Types.Char]]
  {- Arity: 1, Strictness: <S,1*U> -}
2266ee49087c7640ce072b4c3d84e670
  ppProjectHeader ::
    GHC.Base.String -> Data.TTask.Types.Project -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,U(1*U,1*U,1*U,1*U)>,
     Unfolding: (\ pid :: GHC.Base.String
                   pj :: Data.TTask.Types.Project ->
                 Data.TTask.Pretty.formatRecordShowedId
                   Data.TTask.Pretty.ppProjectHeader1
                   pid
                   (Data.TTask.Types.calcProjectPoint pj)
                   (Data.TTask.Types.projectStatus pj)
                   (Data.TTask.Types.projectName pj)) -}
d21749af987c4061e9fd0fe63863b096
  ppProjectHeader1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PROJECT"#) -}
704f209b440e4e784b832e8cc7cfead8
  ppProjectPbl :: Data.TTask.Types.Project -> GHC.Base.String
  {- Arity: 1, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ x1 :: Data.TTask.Types.Project ->
                 Data.TTask.Pretty.ppStoryList
                   (Data.TTask.Types.projectBacklog x1)) -}
4688ffd315c2ca48f631782228a486d5
  ppProjectSprint ::
    Data.TTask.Types.Id
    -> Data.TTask.Types.Project -> GHC.Base.Maybe GHC.Base.String
  {- Arity: 2, Strictness: <L,U(U)><S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ i :: Data.TTask.Types.Id pj :: Data.TTask.Types.Project ->
                 case pj of ww { Data.TTask.Types.Project ww1 ww2 ww3 ww4 ->
                 case Data.TTask.Types.$wgetSprintById ww3 i of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ GHC.Base.String
                   GHC.Base.Just a1
                   -> GHC.Base.Just
                        @ GHC.Base.String
                        (Data.TTask.Pretty.ppSprint a1) } }) -}
3b4bb0382407d85e39f7a79433b2eceb
  ppProjectSprintDetail ::
    Data.TTask.Types.Id
    -> Data.TTask.Types.Project -> GHC.Base.Maybe GHC.Base.String
  {- Arity: 2, Strictness: <L,U(U)><S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ i :: Data.TTask.Types.Id pj :: Data.TTask.Types.Project ->
                 case pj of ww { Data.TTask.Types.Project ww1 ww2 ww3 ww4 ->
                 case Data.TTask.Types.$wgetSprintById ww3 i of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ GHC.Base.String
                   GHC.Base.Just a1
                   -> GHC.Base.Just
                        @ GHC.Base.String
                        (Data.TTask.Pretty.ppSprintDetail a1) } }) -}
73a61476f50f7d1fb24dd29f20e7b549
  ppProjectSprintList :: Data.TTask.Types.Project -> GHC.Base.String
  {- Arity: 1, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ x1 :: Data.TTask.Types.Project ->
                 Data.TTask.Pretty.ppSprintList
                   (Data.TTask.Types.projectSprints x1)) -}
07ca1035deb20b3ff8c12003d9081ead
  ppProjectStory ::
    Data.TTask.Types.Id
    -> Data.TTask.Types.Project -> GHC.Base.Maybe GHC.Base.String
  {- Arity: 2, Strictness: <L,U(U)><S(LLSL),1*U(A,U,1*U,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Data.TTask.Types.Id w1 :: Data.TTask.Types.Project ->
                 case w1 of ww { Data.TTask.Types.Project ww1 ww2 ww3 ww4 ->
                 Data.TTask.Pretty.$wppProjectStory w ww2 ww3 }) -}
5599e1f5bac4cd5634c059ec921e6bfd
  ppProjectTask ::
    Data.TTask.Types.Id
    -> Data.TTask.Types.Project -> GHC.Base.Maybe GHC.Base.String
  {- Arity: 2, Strictness: <L,U(U)><S(LLSL),1*U(A,1*U,1*U,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Data.TTask.Types.Id w1 :: Data.TTask.Types.Project ->
                 case w1 of ww { Data.TTask.Types.Project ww1 ww2 ww3 ww4 ->
                 Data.TTask.Pretty.$wppProjectTask w ww2 ww3 }) -}
62dd918d423240cfa2ab8d546bf274e4
  ppSprint :: Data.TTask.Types.Sprint -> GHC.Base.String
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ sprint :: Data.TTask.Types.Sprint ->
                 Data.TTask.Pretty.formatFamily_$sformatFamily1
                   @ Data.TTask.Types.Sprint
                   Data.TTask.Pretty.ppSprint1
                   sprint
                   Data.TTask.Pretty.ppSprintHeader
                   Data.TTask.Types.sprintStorys
                   Data.TTask.Pretty.ppStoryHeader) -}
c5f1073e7a3ba80aef326af8be5e5b37
  ppSprint1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
bfa52351dbefa65ddfa01c2f92804edb
  ppSprintDetail :: Data.TTask.Types.Sprint -> GHC.Base.String
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ s :: Data.TTask.Types.Sprint ->
                 Data.TTask.Pretty.formatFamily_$sformatFamily1
                   @ Data.TTask.Types.Sprint
                   Data.TTask.Pretty.ppSprint1
                   s
                   Data.TTask.Pretty.ppSprintDetail3
                   Data.TTask.Types.sprintStorys
                   Data.TTask.Pretty.ppSprintDetail1) -}
c6297c308471c6cc623569eeed5230e4
  ppSprintDetail1 :: Data.TTask.Types.UserStory -> GHC.Base.String
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ s :: Data.TTask.Types.UserStory ->
                 Data.TTask.Pretty.formatFamily_$sformatFamily
                   @ Data.TTask.Types.UserStory
                   Data.TTask.Pretty.ppSprintDetail2
                   s
                   Data.TTask.Pretty.ppStoryHeader
                   Data.TTask.Types.storyTasks
                   Data.TTask.Pretty.ppTask) -}
06ad35ae7575d0743f483dba5b44b43b
  ppSprintDetail2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2) -}
5b52342ecb913968b85d875615b49388
  ppSprintDetail3 :: Data.TTask.Types.Sprint -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,U(U(U),U,U,U)>,
     Unfolding: (\ s :: Data.TTask.Types.Sprint ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (Data.TTask.Pretty.ppSprintHeader s)
                   (GHC.CString.unpackAppendCString#
                      "\n"#
                      (case s of wild { Data.TTask.Types.Sprint ds1 ds2 ds3 ds4 ->
                       case Data.TTask.Types.$wstatusToList ds4 of ww { (#,#) ww1 ww2 ->
                       Data.TTask.Pretty.ppSprintDetail4
                         (GHC.Types.: @ Data.TTask.Types.TStatusRecord ww1 ww2) } }))) -}
9efa315ac4e4e027c8940314b5a528b8
  ppSprintDetail4 ::
    [Data.TTask.Types.TStatusRecord] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ x1 :: [Data.TTask.Types.TStatusRecord] ->
                 case GHC.Base.map
                        @ Data.TTask.Types.TStatusRecord
                        @ [GHC.Types.Char]
                        Data.TTask.Pretty.ppSprintDetail5
                        (GHC.List.reverse1
                           @ Data.TTask.Types.TStatusRecord
                           x1
                           (GHC.Types.[] @ Data.TTask.Types.TStatusRecord)) of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : x2 xs1
                   -> Data.OldList.intercalate_$spoly_go
                        @ GHC.Types.Char
                        x2
                        (Data.OldList.prependToAll
                           @ [GHC.Types.Char]
                           Data.TTask.Pretty.formatFamily1
                           xs1) }) -}
0a96727add4d1511ae0158a49a27dbeb
  ppSprintDetail5 ::
    Data.TTask.Types.TStatusRecord -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,U> -}
968db62b5d945018081df480215df437
  ppSprintHeader :: Data.TTask.Types.Sprint -> GHC.Base.String
  {- Arity: 1, Strictness: <L,U(1*U(U),1*U,1*U,1*U)>,
     Unfolding: (\ sprint :: Data.TTask.Types.Sprint ->
                 Data.TTask.Pretty.formatRecordShowedId
                   Data.TTask.Pretty.ppSprintHeader1
                   (case sprint of wild { Data.TTask.Types.Sprint ds1 ds2 ds3 ds4 ->
                    case ds1 of ww2 { GHC.Types.I# ww3 ->
                    case GHC.Show.$wshowSignedInt
                           0
                           ww3
                           (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                    GHC.Types.: @ GHC.Types.Char ww5 ww6 } } })
                   (Data.TTask.Types.calcSprintPoint sprint)
                   (Data.TTask.Types.sprintStatus sprint)
                   (Data.TTask.Types.sprintDescription sprint)) -}
27a44b6fab1ea82765734feff36bde7a
  ppSprintHeader1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SPRINT"#) -}
70e892deacb2bfa248459b77a083ff80
  ppSprintList :: [Data.TTask.Types.Sprint] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ x1 :: [Data.TTask.Types.Sprint] ->
                 case GHC.Base.map
                        @ Data.TTask.Types.Sprint
                        @ [GHC.Types.Char]
                        Data.TTask.Pretty.ppSprintHeader
                        x1 of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : x2 xs1
                   -> Data.OldList.intercalate_$spoly_go
                        @ GHC.Types.Char
                        x2
                        (Data.OldList.prependToAll
                           @ [GHC.Types.Char]
                           Data.TTask.Pretty.formatFamily1
                           xs1) }) -}
a603684dc9c0f3eed75a7a93b17646f7
  ppStatus :: Data.TTask.Types.TStatus -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ s :: Data.TTask.Types.TStatus ->
                 Data.TTask.Pretty.ppSprintDetail4
                   (Data.TTask.Types.statusToList s)) -}
7057f34cdf37f2f9295c170f3c4af491
  ppStatusRecord :: Data.TTask.Types.TStatusRecord -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Data.TTask.Types.TStatusRecord ->
                 case ds of wild {
                   Data.TTask.Types.StatusWait ds1
                   -> Data.TTask.Pretty.ppStatusRecord5
                   Data.TTask.Types.StatusRunning ds1
                   -> Data.TTask.Pretty.ppStatusRecord4
                   Data.TTask.Types.StatusFinished ds1
                   -> Data.TTask.Pretty.ppStatusRecord3
                   Data.TTask.Types.StatusNotAchieved ds1
                   -> Data.TTask.Pretty.ppStatusRecord2
                   Data.TTask.Types.StatusReject ds1
                   -> Data.TTask.Pretty.ppStatusRecord1 }) -}
2988b85756a8d3423dc3ad0af87acaef
  ppStatusRecord1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Reject"#) -}
3becb41e4037176335aca11ca9d01a34
  ppStatusRecord2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Not Achieved"#) -}
1f61c5027938581fc3ab10e8ef4d781f
  ppStatusRecord3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Finished"#) -}
32bee6dbda29ba6f37c20735beb2ebaf
  ppStatusRecord4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Running"#) -}
ff636685266fc4dd1043d18416e654ff
  ppStatusRecord5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Wait"#) -}
65475995eb280dc85dc82d502acffcc6
  ppStory :: Data.TTask.Types.UserStory -> GHC.Base.String
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ story :: Data.TTask.Types.UserStory ->
                 Data.TTask.Pretty.formatFamily_$sformatFamily
                   @ Data.TTask.Types.UserStory
                   Data.TTask.Pretty.ppSprint1
                   story
                   Data.TTask.Pretty.ppStoryHeader
                   Data.TTask.Types.storyTasks
                   Data.TTask.Pretty.ppTask) -}
dcc9e9206ec765f1193bc3896f0f64de
  ppStoryHeader :: Data.TTask.Types.UserStory -> GHC.Base.String
  {- Arity: 1, Strictness: <L,U(1*U(U),1*U,1*U,1*U)>,
     Unfolding: (\ story :: Data.TTask.Types.UserStory ->
                 Data.TTask.Pretty.formatRecordShowedId
                   Data.TTask.Pretty.ppStoryHeader1
                   (case story of wild { Data.TTask.Types.UserStory ds1 ds2 ds3 ds4 ->
                    case ds1 of ww2 { GHC.Types.I# ww3 ->
                    case GHC.Show.$wshowSignedInt
                           0
                           ww3
                           (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                    GHC.Types.: @ GHC.Types.Char ww5 ww6 } } })
                   (Data.TTask.Types.calcStoryPoint story)
                   (Data.TTask.Types.storyStatus story)
                   (Data.TTask.Types.storyDescription story)) -}
4ac7fb1722376ca36a068161a880125a
  ppStoryHeader1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SOTRY"#) -}
b362bbcb6c1c39565d1c709fac3109be
  ppStoryI ::
    GHC.Types.Int -> Data.TTask.Types.UserStory -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ r :: GHC.Types.Int story :: Data.TTask.Types.UserStory ->
                 Data.TTask.Pretty.formatFamily_$sformatFamily
                   @ Data.TTask.Types.UserStory
                   r
                   story
                   Data.TTask.Pretty.ppStoryHeader
                   Data.TTask.Types.storyTasks
                   Data.TTask.Pretty.ppTask) -}
79de2285fe1a1d9e2c90c1f18b110ca6
  ppStoryList :: [Data.TTask.Types.UserStory] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ x1 :: [Data.TTask.Types.UserStory] ->
                 case GHC.Base.map
                        @ Data.TTask.Types.UserStory
                        @ [GHC.Types.Char]
                        Data.TTask.Pretty.ppStoryHeader
                        x1 of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : x2 xs1
                   -> Data.OldList.intercalate_$spoly_go
                        @ GHC.Types.Char
                        x2
                        (Data.OldList.prependToAll
                           @ [GHC.Types.Char]
                           Data.TTask.Pretty.formatFamily1
                           xs1) }) -}
6b7e4a84043e845d731e795e64ddb6b9
  ppTask :: Data.TTask.Types.Task -> GHC.Base.String
  {- Arity: 1, Strictness: <L,U(1*U(U),1*U,1*U(U),1*U,A)>,
     Unfolding: (\ task :: Data.TTask.Types.Task ->
                 Data.TTask.Pretty.formatRecordShowedId
                   Data.TTask.Pretty.ppTask1
                   (case task of wild { Data.TTask.Types.Task ds1 ds2 ds3 ds4 ds5 ->
                    case ds1 of ww2 { GHC.Types.I# ww3 ->
                    case GHC.Show.$wshowSignedInt
                           0
                           ww3
                           (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                    GHC.Types.: @ GHC.Types.Char ww5 ww6 } } })
                   (Data.TTask.Types.taskPoint task)
                   (Data.TTask.Types.taskStatus task)
                   (Data.TTask.Types.taskDescription task)) -}
21000ea95f0093423af8f9c1f63c50ce
  ppTask1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TASK"#) -}
"SPEC formatFamily _ @ Task" [ALWAYS] forall @ a
                                             $dEq :: GHC.Classes.Eq Data.TTask.Types.Task
  Data.TTask.Pretty.formatFamily @ a @ Data.TTask.Types.Task $dEq
  = Data.TTask.Pretty.formatFamily_$sformatFamily @ a
"SPEC formatFamily _ @ UserStory" [ALWAYS] forall @ a
                                                  $dEq :: GHC.Classes.Eq Data.TTask.Types.UserStory
  Data.TTask.Pretty.formatFamily @ a
                                 @ Data.TTask.Types.UserStory
                                 $dEq
  = Data.TTask.Pretty.formatFamily_$sformatFamily1 @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

